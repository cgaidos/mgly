<?php

namespace Moowgly\Lib\Storage;

use Aws\DynamoDb\DynamoDbClient;
use Aws\DynamoDb\Exception\DynamoDbException;
use Aws\DynamoDb\Marshaler;
use Elasticsearch;

class Dynamodb extends Storage
{
    private $ddbc; // DynamoDbClient var
    /**
     * Constructor.
     */
    public function __construct($region, $version, $key, $secret)
    {
        $this->ddbc = DynamoDbClient::factory(array(
                        'endpoint'   => 'http://localhost:8000',  // Use DynamoDB running locally
                        'region'   => $region,
                        'version'  => $version,
                        'credentials' => array(
                            'key' => $key,
                            'secret'  => $secret,
                        )
                    ));
        self::$_instance = $this;
    }

    public function get($keys, $table)
    {

        // $hosts = [
        //     '192.168.1.1:9200',         // IP + Port
        //     '192.168.1.2',              // Just IP
        //     'mydomain.server.com:9201', // Domain + Port
        //     'mydomain2.server.com',     // Just Domain
        //     'https://localhost',        // SSL to localhost
        //     'https://192.168.1.3:9200'  // SSL to IP + Port
        // ];
        $ElasticClient = Elasticsearch\ClientBuilder::create();      
        // $ElasticClient = ClientBuilder::create();   // Instantiate a new ClientBuilder
        // $ElasticClient->setHosts($hosts);           // Set the hosts
        $ElasticClient = $ElasticClient->build();   // Build the client object

        // $params = [
        //     'index' => 'moowgly'
        // ];
       
        // // Create the index
        // $response = $ElasticClient->indices()->create($params);

        /****************** Insert Guest ********************************************/
        // $paramsFields = ["id_guest" => "aaf6zef",
        //     "email" => "emiliemoysson@gmail.com", 
        //     "family_name" => "Dugué",
        //     "first_name" => "Emilie",
        //     "phone" => "06 69 02 46 65",
        //     "age" => 40,
        //     "photo" => "photo.png",
        //     "address" => [ "street" => "55 boulevard Sérurier", "zip_code" => "75019", "city" => "Paris", "country" => "France" ]
        // ];

        // $params = [
        //     'index' => 'moowgly',
        //     'type' => 'Guest',
        //     'body' => $paramsFields,
        // ];

        // // Document will be indexed to my_index/my_type/<autogenerated ID>
        // $response = $ElasticClient->index($params);

       
        /******************************************SEARCH********************************************************/

        // Nous pouvons utiliser du json pour les recherches
        
        $json = '{
            "query" : {
                "match_all" : {}
            }
        }';

        $params = [
            'index' => 'moowgly',
            'type' => 'Guest',
            'body' => [
                'query' => [
                    "match_all" => (object)[],
                    // // 'match' => [
                    // //     'first_name' => 'Gwendal'
                    // // ],
                    // 'wildcard' => [
                    //     'first_name' => '*wend*'
                    // ],
                ]
            ]
        ];


        $results = $ElasticClient->search($params);

        $milliseconds = $results['took'];
        $maxScore     = $results['hits']['max_score'];

        $score = $results['hits']['hits'][0]['_score'];
        $doc   = $results['hits']['hits'][0]['_source'];
        $docs   = $results['hits']['hits'];

        foreach($docs as $document) { 
            echo "<br><br>un seul doc : "; print_r($document["_source"]);
        }

        // echo "<br><br>un seul doc : "; print_r($doc);

        /*****************************************UPDATE********************************************************/

        $params = [
            'index' => 'moowgly',
            'type' => 'Guest',
            'id' => 'AVpvmmST2VUiv9VW7nDV',
            'body' => [
                // 'script'      => 'ctx._source.age+=45', // on ne peut pas faire les 2 méthodes en meme temps
                'doc' => [
                    "family_name" => "Dugueté",
                    "first_name" => "Gwendal",
                    "phone" => "06 69 02 46 65",
                    "age" => 30,
                ]
            ]
        ];

        $response = $ElasticClient->update($params);

        // var_dump($response);
        /*************************************************************************************************/
        // Remove raw http data
        // array_pop($keys);

        // $arrayReq = array();
        
        // $marshaler = new Marshaler();

        // $itemJson = json_encode($keys);

        // $arrayReq['TableName'] = $table;
        // $arrayReq['Key'] = $marshaler->marshalJson($itemJson);
      
        // $response = $this->ddbc->getItem($arrayReq);

        // return json_encode($response['Item']);
    }

    public function post($data, $table)
    {
        array_pop($data);

        $marshaler = new Marshaler();

        $itemJson = json_encode($data);
       
        $response = $this->ddbc->putItem([
            'TableName' => $table,
            'Item'      => $marshaler->marshalJson($itemJson)
        ]);

        return json_encode($response['@metadata']['statusCode']);
    }

    public function delete($data, $table)
    {
        array_pop($data);
       
        $marshaler = new Marshaler();

        $keysJson = json_encode($data['keys']);

        $keysArray = $marshaler->marshalJson($keysJson);

        unset($data['keys']);

        $itemJson = json_encode($data);

        $arrayReq = array();

        $arrayReq['TableName'] = $table;
        $arrayReq['Key'] = $keysArray;

        $arrayReq['ExpressionAttributeValues'] = [':bool' => ['BOOL' => TRUE]];

        $arrayReq['UpdateExpression'] = 'set deleted = :bool';
        // $arrayReq['ReturnValues'] = 'ALL_NEW';

        $response = $this->ddbc->updateItem($arrayReq);

        return json_encode($response['@metadata']['statusCode']);
    }

    public function put($data, $table)
    {
        array_pop($data);
       
        $marshaler = new Marshaler();

        $keysJson = json_encode($data['keys']);

        $keysArray = $marshaler->marshalJson($keysJson);

        unset($data['keys']);

        $itemJson = json_encode($data);

        $itemArray = $marshaler->marshalJson($itemJson);

        $arrayReq = array();

        $arrayReq['TableName'] = $table;
        $arrayReq['Key'] = $keysArray;

        $arrayReq['ExpressionAttributeValues'] = "";
        $set = " set";
        $remove = " remove";
        $arrayReq['UpdateExpression'] = "";


        foreach ($itemArray as $attr => $value) {

            if($value == array('S' => '#dtdm' )){

                $remove .= " " . $attr . ",";

            }else{
                $arrayReq['ExpressionAttributeValues'][':' . $attr] = $value;

                $set .= " " . $attr . " = :" . $attr . ",";
            }
            
        }

        if($arrayReq['ExpressionAttributeValues'] == ""){
           unset($arrayReq['ExpressionAttributeValues']);
        }

        $set = rtrim($set, ",");
        $remove = rtrim($remove, ",");

        if($set != " set"){
            $arrayReq['UpdateExpression'] .= $set;
        }

        if($remove != " remove"){
            $arrayReq['UpdateExpression'] .= $remove;
        }

        // $arrayReq['ReturnValues'] = 'ALL_NEW';

        $response = $this->ddbc->updateItem($arrayReq);

        return json_encode($response['@metadata']['statusCode']);
    }

    public function getField($id, $table, $field = 'md5')
    {
        $fieldValue = null;
        if ($id) {
            $stmt = $this->db->prepare("SELECT $field FROM $table WHERE id=:id");
            $stmt->execute(array(
                'id' => $id,
            ));
            $result = $stmt->fetch();
            $fieldValue = $result[$field];
        }

        return $fieldValue;
    }
}
